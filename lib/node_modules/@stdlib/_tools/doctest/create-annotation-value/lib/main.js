/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

// Note: keep in alphabetical order
var isArray = require( '@stdlib/assert/is-array' );
var isBoolean = require( '@stdlib/assert/is-boolean' );
var isBooleanArray = require( '@stdlib/assert/is-booleanarray' );
var isBoxedPrimitive = require( '@stdlib/assert/is-boxed-primitive' );
var isComplexTypedArray = require( '@stdlib/assert/is-complex-typed-array' );
var isError = require( '@stdlib/assert/is-error' );
var isInfinite = require( '@stdlib/assert/is-infinite' );
var isInteger = require( '@stdlib/assert/is-integer' );
var isnan = require( '@stdlib/assert/is-nan' );
var isNull = require( '@stdlib/assert/is-null' );
var isNumber = require( '@stdlib/assert/is-number' );
var isObject = require( '@stdlib/assert/is-object' );
var isPrimitive = require( '@stdlib/assert/is-primitive' );
var isRegExp = require( '@stdlib/assert/is-regexp' );
var isString = require( '@stdlib/assert/is-string' );
var isTypedArray = require( '@stdlib/assert/is-typed-array' );
var isUndefined = require( '@stdlib/assert/is-undefined' );

var capitalize = require( '@stdlib/string/capitalize' );
var roundn = require( '@stdlib/math/base/special/roundn' );
var floor = require( '@stdlib/math/base/special/floor' );
var constructorName = require( '@stdlib/utils/constructor-name' );
var objectKeys = require( '@stdlib/utils/keys' );
var typeOf = require( '@stdlib/utils/type-of' );
var reinterpretComplex = require( '@stdlib/strided/base/reinterpret-complex' );
var copyArray = require( '@stdlib/array/base/copy' );
var validate = require( './validate.js' );


// FUNCTIONS //

/**
* Creates a type annotation value.
*
* @private
* @param {*} actual - actual return value
* @param {string} expected - return value annotation
* @returns {string} type annotation
*/
function typeAnnotation( actual ) {
	if ( isPrimitive( actual ) ) {
		return '<'+typeOf( actual )+'>';
	}
	if ( isBoxedPrimitive( actual ) ) {
		return '<'+capitalize( typeOf( actual ) )+'>';
	}
	if ( isError( actual ) ) {
		return '<'+actual.name+'>';
	}
	return '<'+constructorName( actual )+'>';
}

/**
* Creates a return annotation for a number primitive.
*
* @private
* @param {*} actual - actual return value
* @param {Object} opts - function options
* @returns {string} return annotation for number primitive
*/
function numberAnnotation( actual, opts ) {
	var out;
	if ( isInteger( actual ) ) {
		return ( opts.decimal ) ? actual+'.0' : String( actual );
	}
	if ( isnan( actual ) ) {
		return 'NaN';
	}
	if ( isInfinite( actual ) ) {
		return actual.toString();
	}
	out = roundn( actual, -opts.precision );
	if ( out !== actual ) {
		return '~'+out;
	}
	return String( out );
}

/**
* Creates a return annotation for a JavaScript primitive.
*
* @private
* @param {*} actual - actual return value
* @param {Object} opts - function options
* @returns {string} return annotation for primitive
*/
function primitiveAnnotation( actual, opts ) {
	if ( isBoolean( actual ) ) {
		return String( actual );
	}
	if ( isNumber( actual ) ) {
		return numberAnnotation( actual, opts );
	}
	if ( isString( actual ) ) {
		return '\''+actual+'\'';
	}
	if ( isNull( actual ) ) {
		return 'null';
	}
	if ( isUndefined( actual ) ) {
		return 'undefined';
	}
}

/**
* Creates a return annotation for a JavaScript value.
*
* @private
* @param {*} actual - actual return value
* @param {Object} opts - function options
* @returns {string} return annotation for JavaScript value
*/
function genericAnnotation( actual, opts ) {
	var keys;
	var out;
	var end;
	var f;
	var i;

	if ( isPrimitive( actual ) ) {
		return primitiveAnnotation( actual, opts );
	}
	if ( isTypedArray( actual ) || isComplexTypedArray( actual ) || isBooleanArray( actual ) ) {
		out = '<'+actual.constructor.name+'>';
		if ( actual.length === 0 ) {
			out += '[]';
			return out;
		}
		f = numberAnnotation;
		if ( isComplexTypedArray( actual ) ) {
			actual = reinterpretComplex( actual, 0 );
		} else if ( isBooleanArray( actual ) ) {
			actual = copyArray( actual );
			f = genericAnnotation;
		}
		out += '[ ';
		out += f( actual[ 0 ], opts );
		if ( actual.length > opts.numel ) {
			end = floor( opts.numel / 2 );
			for ( i = 1; i < end; i++ ) {
				out += ', ';
				out += f( actual[ i ], opts );
			}
			out += ', ...';
			for ( i = actual.length - end; i < actual.length; i++ ) {
				out += ', ';
				out += f( actual[ i ], opts );
			}
		}
		else {
			for ( i = 1; i < actual.length; i++ ) {
				out += ', ';
				out += f( actual[ i ], opts );
			}
		}
		out += ' ]';
		return out;
	}
	if ( isArray( actual ) ) {
		if ( actual.length === 0 ) {
			return '[]';
		}
		out = '[ ';
		out += genericAnnotation( actual[ 0 ], opts );
		if ( actual.length > opts.numel ) {
			end = floor( opts.numel / 2 );
			for ( i = 1; i < end; i++ ) {
				out += ', ';
				out += genericAnnotation( actual[ i ], opts );
			}
			out += ', ...';
			for ( i = actual.length - end; i < actual.length; i++ ) {
				out += ', ';
				out += genericAnnotation( actual[ i ], opts );
			}
		}
		else {
			for ( i = 1; i < actual.length; i++ ) {
				out += ', ';
				out += genericAnnotation( actual[ i ], opts );
			}
		}
		out += ' ]';
		return out;
	}
	if ( isRegExp( actual ) ) {
		return actual.toString();
	}
	if ( isObject( actual ) ) {
		keys = objectKeys( actual );
		if ( keys.length === 0 ) {
			return '{}';
		}
		out = '{ ';
		out += '\''+keys[ 0 ]+'\': ';
		out += genericAnnotation( actual[ keys[ 0 ] ], opts );
		for ( i = 1; i < keys.length; i++ ) {
			out += ', \''+keys[ i ]+'\': ';
			out += genericAnnotation( actual[ keys[ i ] ], opts );
		}
		out += ' }';
		return out;
	}
	return '';
}


// MAIN //

/**
* Creates a doctest return annotation value.
*
* @param {*} actual - actual return value
* @param {Object} [options] - function options
* @param {boolean} [options.decimal=false] - boolean indicating whether to always include a decimal point even for integer values
* @param {boolean} [options.type=false] - boolean indicating whether to only specify type in created annotation
* @param {PositiveInteger} [options.numel=4] - number of array elements to display in return annotation values before skipping elements via `...` notation
* @param {PositiveInteger} [options.precision=3] - number of decimal digits for real-valued numbers
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {string} return annotation value
*
* @example
* var out = createAnnotationValue( 1/3 );
* // returns '~0.333'
*/
function createAnnotationValue( actual, options ) {
	var opts;
	var err;

	opts = {};
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	opts.numel = opts.numel || 4;
	opts.precision = opts.precision || 3;
	if ( opts.type ) {
		return typeAnnotation( actual );
	}
	return genericAnnotation( actual, opts );
}


// EXPORTS //

module.exports = createAnnotationValue;
